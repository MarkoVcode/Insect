worker_processes 4;
events { worker_connections 1024; }
{{$app_web := env "APP_NAME_WEB"}}
{{$app_api := env "APP_NAME_API"}}
{{$app_ws := env "APP_NAME_WS"}}
http {
        upstream {{printf $app_web}} {
            ip_hash;{{range service $app_web}}
            server {{.Address}}:{{.Port}} max_fails=3 fail_timeout=60 weight=1;{{end}}
        }
        upstream {{printf $app_api}} {
            least_conn;{{range service $app_api}}
            server {{.Address}}:{{.Port}} max_fails=3 fail_timeout=60 weight=1;{{end}}
        }
        upstream {{printf $app_ws}} {
            least_conn;{{range service $app_ws}}
            server {{.Address}}:{{.Port}} max_fails=3 fail_timeout=60 weight=1;{{end}}
        }
        upstream node-consul {
              least_conn;
              server consul:8500 weight=1 max_fails=3 fail_timeout=30s;
        }
server {
    listen          443 default_server ssl;
    server_name         _;
    #ssl_protocols	TLSv1 TLSv1.1 TLSv1.2;
    ssl_certificate     /etc/ssl/thingoncloud_cert_chain.crt;
    ssl_certificate_key /etc/ssl/thingoncloud.key;
}
server {
    listen      443 ssl;
    server_name www.insectin.space;
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_min_length 20;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/javascript application/xml application/xml+rss text/javascript;
    location / {
		        gzip_static on;
                proxy_pass http://{{printf $app_web}};
                proxy_http_version 1.1;
		        if ($request_uri ~* ".(jpg|jpeg|gif|zip|css|png|ico|txt|js)(\?v=[0-9.]+)?$") {
			        expires 365d;
			        access_log off;
			        add_header Cache-Control "public";
			        break;
		        }
	            proxy_set_header Host $host;
        	    proxy_set_header X-Real-IP $remote_addr;
       		    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        	    proxy_set_header X-Forwarded-Proto $scheme;
                proxy_cache_bypass $http_upgrade;
                auth_basic "Restricted";
                auth_basic_user_file /etc/nginx/.htpasswd_toc;
               }
}
server {
    listen      80;
    server_name www.insectin.space;
    return      301 https://$server_name$request_uri;
}
server {
    listen      443 ssl;
    server_name ws.insectin.space;
    location / {
                proxy_pass http://{{printf $app_ws}};
                proxy_http_version 1.1;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
		        proxy_set_header Upgrade $http_upgrade;
		        proxy_set_header Connection "upgrade";
		        proxy_read_timeout 86400s;
	            proxy_send_timeout 86400s;
                proxy_cache_bypass $http_upgrade;
               }
}
server {
    listen      80;
    listen      443 ssl;
    server_name api.insectin.space;
    location / {
                proxy_pass http://{{printf $app_api}};
                proxy_http_version 1.1;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_cache_bypass $http_upgrade;
               }
}
server {
    listen      443;
    server_name consul.insectin.space;
    location / {
                proxy_pass http://node-consul;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $host;
                proxy_cache_bypass $http_upgrade;
                auth_basic "Restricted";
                auth_basic_user_file /etc/nginx/.htpasswd;
               }
}
server {
    listen      80;
    server_name consul.insectin.space;
    return      301 https://$server_name$request_uri;
}
}
